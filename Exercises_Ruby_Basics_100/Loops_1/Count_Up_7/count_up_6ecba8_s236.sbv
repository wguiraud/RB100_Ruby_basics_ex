we need to modify the code we've been given in this problem
so that it counts up from 1 to 10.

running the code as we've been given it counts down from 10 to 1.

you can see on line 37 we have a local variable count initialized to 10 and on lines 39 through 42 we have an until loop
now an until loop will continue to iterate until its condition 
which you can see to the right of until here on line 39 
evaluates to true 
this works kind of in the opposite of a while loop 
which iterates until its condition evaluates as false

so in this code until the local variable count references 0
the program outputs count and then decreases the value of count by one
so this code successfully counts down from ten to one
what we want to do is count from one to ten
so the first step here is to change our initial value of count to one WRITING  and we know that as we iterate through this loop 
we want to increment count by one WRITING

now we need to think hard about what the condition for our until loop should be

let's first just set it to 10 WRITING and see what the output is
our program only outputs numbers 1 through 9
and we want 10 to be included in our output
looking closely at the code you can see that because we
output the value of count on line 40 prior to incrementing count by 1
when this loop begins its 10th iteration it will stop
because count will be equal to 10
prior to ever reaching the code on line 40 and outputting 10. 

so what we can do to fix this problem WRITING
is continue to iterate until account is greater than 10.
and running in our code 
you can see that this will give us the expected output

remember that when you're looping and keeping track of a count
it's very important to be aware of when you're performing the desired action
versus when your loop is going to stop iterating

WRITING if we wanted to end our iteration when count was equal to exactly 10 
we would need to move our code around a little bit WRITING
so that it would still work as we wanted to
so we could increment count prior to outputting its value

however then our count starts at two 
so if we move that code around we have to remember to also to initialize count to zero WRITING

and now again we'll see the expected output this way
so there's more than one way to write
your code to achieve the expected result
but the important thing is to be very conscious 
of when exactly you make changes to the values of your variables
and how that's going to affect the execution of your loop
and here again we know that there are some ruby methods 
that could achieve the same thing that we've done here with this code
but it's very important to be able to write this logic out yourself
as there's not always going to be the perfect method available for what you want to do
and you may not always have each and every method memorized at that time

