0:00:04.400,0:00:08.480
in this problem

0:00:05.440,0:00:10.800
we need to modify the code given so

0:00:08.480,0:00:11.840
that the loop stops iterating when the

0:00:10.800,0:00:16.079
user inputs

0:00:11.840,0:00:17.840
yes so let's run our code as it is

0:00:16.079,0:00:21.600
[Music]

0:00:17.840,0:00:24.720
and currently no matter what we input

0:00:21.600,0:00:24.720
the loop continues

0:00:25.840,0:00:30.000
looking back at this code you can see

0:00:27.760,0:00:32.160
there is no reserved word break in

0:00:30.000,0:00:34.079
our loop so we currently have an

0:00:32.160,0:00:36.480
infinite loop every time we run this

0:00:34.079,0:00:36.480
code

0:00:36.719,0:00:39.920
in order to avoid an infinite loop we

0:00:39.520,0:00:43.280
use

0:00:39.920,0:00:44.000
the reserved word break if we place

0:00:43.280,0:00:47.039
break on

0:00:44.000,0:00:50.480
line four of our code

0:00:47.039,0:00:52.520
and run it again we'll see that

0:00:50.480,0:00:57.600
no matter what our input is

0:00:52.520,0:00:59.840
[Music]

0:00:57.600,0:01:01.520
our code breaks out of the loop and

0:00:59.840,0:01:03.520
that's because we didn't provide our

0:01:01.520,0:01:04.479
break statement with any type of

0:01:03.520,0:01:06.880
condition

0:01:04.479,0:01:07.680
we've just told it that when it reaches

0:01:06.880,0:01:11.040
line four

0:01:07.680,0:01:13.439
to break out of the loop no matter what

0:01:11.040,0:01:18.000
in this problem what we wanted to do is

0:01:13.439,0:01:18.000
only break when the user inputs yes

0:01:21.119,0:01:25.200
now we're holding the user input in a

0:01:23.840,0:01:28.320
local variable called

0:01:25.200,0:01:29.439
answer and we can leverage that to

0:01:28.320,0:01:32.500
determine

0:01:29.439,0:01:35.200
whether the user input was yes

0:01:32.500,0:01:37.040
[Music]

0:01:35.200,0:01:41.200
so we can compare the value of the

0:01:37.040,0:01:43.840
answer to the string yes

0:01:41.200,0:01:46.320
[Music]

0:01:43.840,0:01:48.320
and now when i input yes you can see

0:01:46.320,0:01:52.159
that the loop exits

0:01:48.320,0:01:54.880
so that's the desired behavior

0:01:52.159,0:01:55.600
now it may be helpful to the user if we

0:01:54.880,0:01:58.000
output an

0:01:55.600,0:01:59.270
error message if their input is anything

0:01:58.000,0:02:04.919
other than yes

0:01:59.270,0:02:04.919
[Music]

0:02:06.799,0:02:10.720
and now you can see we're explaining to

0:02:08.800,0:02:11.630
the user what they need to do in order

0:02:10.720,0:02:14.400
to exit

0:02:11.630,0:02:16.640
[Music]

0:02:14.400,0:02:19.840
you can take this a little further by

0:02:16.640,0:02:23.200
doing a little bit of input validation

0:02:19.840,0:02:25.760
for example if we run our code and we

0:02:23.200,0:02:28.640
input yes with a capital y

0:02:25.760,0:02:30.800
our code will not interpret that as yes

0:02:28.640,0:02:33.840
because we have our code written to

0:02:30.800,0:02:37.280
only break if answer is equal to

0:02:33.840,0:02:41.120
the string yes with a lowercase y

0:02:37.280,0:02:41.120
there's a few ways we could handle this

0:02:42.319,0:02:47.120
we can break if answer is equal to a

0:02:45.040,0:02:51.840
lowercase yes

0:02:47.120,0:02:51.840
or yes with an uppercase y

0:02:52.800,0:02:56.480
you can see our program exits

0:02:58.640,0:03:03.200
we can also use the string down case

0:03:00.959,0:03:06.800
method on our input when we store it

0:03:03.200,0:03:06.800
into the local variable answer

0:03:06.959,0:03:10.959
and now even if we type yes in all

0:03:09.920,0:03:13.440
capital letters

0:03:10.959,0:03:15.760
our program will still recognize that as

0:03:13.440,0:03:15.760
yes

0:03:16.879,0:03:21.760
so there's a lot you can do with input

0:03:19.120,0:03:24.959
validation whether that be

0:03:21.760,0:03:26.560
with built-in ruby methods or by writing

0:03:24.959,0:03:28.720
out your own logic

0:03:26.560,0:03:30.840
and you can explore that more as you

0:03:28.720,0:03:33.840
continue to learn more about

0:03:30.840,0:03:33.840
ruby

