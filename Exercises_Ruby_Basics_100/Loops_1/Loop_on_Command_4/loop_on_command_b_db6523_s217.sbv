in this problem we need to modify the code given 
so that the loop stops iterating when the user inputs yes 

so let's run our code as it is
and currently no matter what we input
the loop continues 

looking back at this code 
you can see there is no reserved word break in our loop 
so we currently have an infinite loop every time we run this code

in order to avoid an infinite loop 
we use the reserved word break WRITING

if we place break on line 13 of our code
and run it again 
we'll see that no matter what our input is 
WRITING 
our code breaks out of the loop 
and that's because 
we didn't provide our break statement 
with any type of condition
we've just told it that when it reaches line 13
to break out of the loop no matter what

in this problem what we wanted to do 
is only break when the user inputs yes
WRITING

now we're holding the user input in a local variable called answer 
and we can leverage that to determine
whether the user input was yes WRITING

so we can compare the value of the answer 
to the string yes
and now when i input yes 
you can see that the loop exits

so that's the desired behavior
now it may be helpful to the user 
WRITING
if we output an error message 
if their input is anything other than yes

and now you can see 
we're explaining to the user 
what they need to do in order to exit

you can take this a little further 
by doing a little bit of input validation
for example if we run our code 
and we input yes with a capital y
our code will not interpret that as yes

because we have our code written to only break 
if answer is equal to the string yes 
with a lowercase y

there's a few ways we could handle this
WRITING
we can break if answer is equal to a lowercase yes
or yes with an uppercase y

you can see our program exits
we can also use the string down case method 
WRITING
on our input when we store it into the local variable answer

and now even if we type yes in all capital letters
our program will still recognize that as yes

so there's a lot you can do with input validation 
whether that be with built-in ruby methods 
or by writing out your own logic
and you can explore that more 
as you continue to learn more about ruby

