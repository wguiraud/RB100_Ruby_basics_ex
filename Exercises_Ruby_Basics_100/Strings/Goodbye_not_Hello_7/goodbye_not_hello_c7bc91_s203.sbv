0:00:05.200,0:00:10.000
this problem asks us

0:00:06.720,0:00:10.880
to invoke a destructive method on

0:00:10.000,0:00:13.360
greeting

0:00:10.880,0:00:16.400
which is a local variable referencing

0:00:13.360,0:00:20.000
the string hello when we

0:00:16.400,0:00:22.240
output greeting on line 2 by passing it

0:00:20.000,0:00:24.720
as an argument to put us

0:00:22.240,0:00:27.439
we want the string goodbye to be printed

0:00:24.720,0:00:30.640
instead of hello

0:00:27.439,0:00:32.000
let's hop into irb and take a look at

0:00:30.640,0:00:34.559
the string method

0:00:32.000,0:00:34.559
g sub

0:00:36.880,0:00:41.280
again i'll create a local variable

0:00:39.120,0:00:45.840
greeting

0:00:41.280,0:00:45.840
and assign it to the string hello

0:00:49.039,0:00:54.160
when we invoke g sub we can pass in two

0:00:52.239,0:00:56.559
arguments

0:00:54.160,0:00:57.440
the first being the pattern that we want

0:00:56.559,0:01:00.559
to replace

0:00:57.440,0:01:04.719
in the calling string and the second

0:01:00.559,0:01:04.719
being what we want to replace it with

0:01:04.799,0:01:08.159
so in this example let's say that we

0:01:06.880,0:01:13.840
want to replace the

0:01:08.159,0:01:13.840
e in hello with a

0:01:14.640,0:01:21.040
and you can see that substitution this

0:01:17.759,0:01:23.119
is the non-destructive g sub method

0:01:21.040,0:01:25.360
however our problem description

0:01:23.119,0:01:26.080
specifically tells us to use a

0:01:25.360,0:01:30.960
destructive

0:01:26.080,0:01:34.479
method this non-destructive g-sub

0:01:30.960,0:01:34.479
will return a new string

0:01:34.560,0:01:41.840
however you can see that greeting still

0:01:37.920,0:01:41.840
points to our original string

0:01:42.240,0:01:47.119
a destructive method will modify that

0:01:44.960,0:01:51.680
string in place

0:01:47.119,0:01:51.680
and ruby provides a destructive g-sub

0:01:52.799,0:01:57.680
this g sub has a bang operator at the

0:01:55.360,0:01:57.680
end

0:01:57.759,0:02:01.280
so let's run the same example this time

0:02:00.000,0:02:03.600
with the destructive g

0:02:01.280,0:02:03.600
sub

0:02:06.320,0:02:09.840
and the return value appears to be the

0:02:08.800,0:02:12.879
same

0:02:09.840,0:02:15.360
however if we inspect the variable

0:02:12.879,0:02:17.200
greeting again you can see that the

0:02:15.360,0:02:20.800
string referenced by greeting was

0:02:17.200,0:02:20.800
actually modified in place

0:02:21.280,0:02:25.599
so this destructive g sub will work

0:02:23.760,0:02:28.000
perfectly for the problem we've been

0:02:25.599,0:02:28.000
given

0:02:29.450,0:02:34.480
[Music]

0:02:31.599,0:02:38.640
now in this case we want to replace the

0:02:34.480,0:02:38.640
string hello with the string goodbye

0:02:40.239,0:02:45.680
so we can actually pass in hello

0:02:44.080,0:02:48.319
as the pattern that we want to be

0:02:45.680,0:02:48.319
replaced

0:02:49.599,0:02:54.800
and we'll pass in the string goodbye as

0:02:51.680,0:02:54.800
our second argument

0:02:55.360,0:03:06.640
now let's run our code and see if it

0:02:57.519,0:03:06.640
outputs goodbye and it does

0:03:06.720,0:03:10.400
ruby provides a lot of handy string

0:03:08.879,0:03:13.599
methods for us

0:03:10.400,0:03:14.800
to learn more about g sub or any other

0:03:13.599,0:03:19.840
string method

0:03:14.800,0:03:19.840
take a look at the ruby documentation

