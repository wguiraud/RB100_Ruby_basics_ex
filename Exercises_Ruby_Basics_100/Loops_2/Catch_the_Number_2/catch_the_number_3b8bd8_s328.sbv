0:00:04.799,0:00:08.320
we need to

0:00:05.600,0:00:10.480
modify the code we've been given so that

0:00:08.320,0:00:15.120
our loop stops executing

0:00:10.480,0:00:15.120
if number is between 0 and 10.

0:00:15.200,0:00:21.119
number is a variable local to this block

0:00:19.119,0:00:23.519
and each time we iterate through our

0:00:21.119,0:00:25.840
loop number will be assigned to

0:00:23.519,0:00:27.920
a random number between zero and

0:00:25.840,0:00:30.320
ninety-nine

0:00:27.920,0:00:31.519
remember that the kernel rand method

0:00:30.320,0:00:35.200
used here on line

0:00:31.519,0:00:38.160
two will return a random integer between

0:00:35.200,0:00:39.360
zero and one less than the argument we

0:00:38.160,0:00:42.840
passed to it

0:00:39.360,0:00:45.840
in this case that's one hundred

0:00:42.840,0:00:45.840
so

0:00:47.060,0:00:50.879
[Music]

0:00:48.800,0:00:53.120
taking this code out of our loop for a

0:00:50.879,0:00:55.860
moment let's just run the program

0:00:53.120,0:00:57.680
and print out these random numbers

0:00:55.860,0:01:00.320
[Music]

0:00:57.680,0:01:01.730
and you can see that zero is included in

0:01:00.320,0:01:03.760
our output

0:01:01.730,0:01:07.040
[Music]

0:01:03.760,0:01:09.520
okay so now we can see

0:01:07.040,0:01:10.320
how rand is randomly generating these

0:01:09.520,0:01:14.000
numbers for

0:01:10.320,0:01:16.390
us and they're being assigned to the

0:01:14.000,0:01:19.119
local variable number

0:01:16.390,0:01:21.680
[Music]

0:01:19.119,0:01:22.799
so going back to our loop structure we

0:01:21.680,0:01:25.520
know that we need to

0:01:22.799,0:01:26.960
break out of this loop if the number

0:01:25.520,0:01:30.880
generated by rand

0:01:26.960,0:01:30.880
is between 0 and 10.

0:01:32.159,0:01:36.960
we can use an if statement and if the

0:01:35.280,0:01:40.079
condition that we provide

0:01:36.960,0:01:41.680
evaluates to true then we will execute

0:01:40.079,0:01:44.240
the reserved word break

0:01:41.680,0:01:46.320
and break out of this loop otherwise the

0:01:44.240,0:01:48.159
loop will continue

0:01:46.320,0:01:49.439
so we need to think about what our

0:01:48.159,0:01:51.520
conditional will be

0:01:49.439,0:01:52.880
to determine whether the number is

0:01:51.520,0:01:56.240
between 0

0:01:52.880,0:01:58.560
and 10. there's more than one way that

0:01:56.240,0:01:59.280
we could do this but let's start by

0:01:58.560,0:02:02.640
using the

0:01:59.280,0:02:05.680
comparable between method

0:02:02.640,0:02:07.439
and this method takes two arguments the

0:02:05.680,0:02:07.990
two integers that we want to look

0:02:07.439,0:02:09.920
between

0:02:07.990,0:02:12.480
[Music]

0:02:09.920,0:02:15.050
and it will return a boolean either true

0:02:12.480,0:02:16.400
or false

0:02:15.050,0:02:19.280
[Music]

0:02:16.400,0:02:21.280
so if our condition returns true we'll

0:02:19.280,0:02:23.040
use the reserve word break to break out

0:02:21.280,0:02:25.120
of this loop

0:02:23.040,0:02:28.480
otherwise we want to keep looping and

0:02:25.120,0:02:31.680
generating these random numbers

0:02:28.480,0:02:34.239
so let's run our code as is

0:02:31.680,0:02:35.840
okay so you can see that our number was

0:02:34.239,0:02:39.040
between 0 and 10

0:02:35.840,0:02:41.360
it was 5 which we output to the screen

0:02:39.040,0:02:44.800
and then we broke out of our loop and

0:02:41.360,0:02:44.800
our program finished running

0:02:46.080,0:02:51.200
let's run the program one more time okay

0:02:49.360,0:02:54.480
and now you can see that

0:02:51.200,0:02:55.120
we had to loop through several times

0:02:54.480,0:02:58.000
before

0:02:55.120,0:02:58.400
the random number generated was between

0:02:58.000,0:03:02.000
zero

0:02:58.400,0:03:03.360
and ten and finally the number generated

0:03:02.000,0:03:06.800
was five

0:03:03.360,0:03:10.239
so our if condition evaluated to true

0:03:06.800,0:03:10.239
and we broke out of the loop

0:03:11.280,0:03:16.879
so this program is working according to

0:03:14.000,0:03:19.120
the problem requirements

0:03:16.879,0:03:22.080
if we wanted to we could remove lines

0:03:19.120,0:03:22.080
six and seven

0:03:23.440,0:03:28.959
and place our break statement on the

0:03:25.519,0:03:28.959
same line as the conditional

0:03:30.159,0:03:35.120
again you'll see that our program works

0:03:32.080,0:03:38.480
as expected and stops looping when

0:03:35.120,0:03:38.480
number is equal to one

0:03:40.720,0:03:45.280
we could also determine whether our

0:03:43.200,0:03:48.799
number is between zero and ten

0:03:45.280,0:03:48.799
in a few different ways

0:03:49.519,0:03:53.599
for example we can use comparison

0:03:53.760,0:04:00.159
so if our number is greater than or

0:03:56.560,0:04:04.080
equal to zero

0:04:00.159,0:04:05.040
and our number is less than or equal to

0:04:04.080,0:04:07.840
10

0:04:05.040,0:04:08.799
then we want to break out of our loop

0:04:07.840,0:04:13.680
now in this case

0:04:08.799,0:04:16.000
i would actually move my break statement

0:04:13.680,0:04:19.359
back into a longer if statement just to

0:04:16.000,0:04:19.359
make things more readable

0:04:19.440,0:04:24.320
[Music]

0:04:21.120,0:04:26.560
okay and again we see our program

0:04:24.320,0:04:27.520
generating these random numbers until

0:04:26.560,0:04:30.560
it's reached

0:04:27.520,0:04:32.240
a number between 0 and 10. so that works

0:04:30.560,0:04:35.520
as well

0:04:32.240,0:04:37.919
another solution might be to create a

0:04:35.520,0:04:37.919
range

0:04:38.080,0:04:44.720
from 1 up to 10 inclusive

0:04:42.240,0:04:46.960
and call the include method which will

0:04:44.720,0:04:50.960
return a boolean

0:04:46.960,0:04:50.960
and pass in number as an argument

0:04:52.240,0:04:57.360
and again we iterate through until we've

0:04:55.840,0:05:00.800
reached a number between

0:04:57.360,0:05:02.560
0 and 10 7 in this case

0:05:00.800,0:05:05.520
and then we break out of our loop and

0:05:02.560,0:05:05.520
the program ends

0:05:05.840,0:05:09.440
this logic here just checks whether the

0:05:08.560,0:05:11.520
given range

0:05:09.440,0:05:12.479
includes the argument passed to the

0:05:11.520,0:05:15.680
method

0:05:12.479,0:05:16.479
there are multiple ways to test the same

0:05:15.680,0:05:18.960
logic

0:05:16.479,0:05:20.400
and as you learn more about ruby you'll

0:05:18.960,0:05:25.840
learn a little bit more about the

0:05:20.400,0:05:25.840
different methods available to you

