0:00:04.799,0:00:09.200
we need to write a loop

0:00:06.319,0:00:10.480
that prints numbers one through five and

0:00:09.200,0:00:13.759
whether the number is

0:00:10.480,0:00:16.400
even or odd and we've been given some

0:00:13.759,0:00:18.000
example output to look at

0:00:16.400,0:00:20.640
so we're going to use the code we've

0:00:18.000,0:00:22.560
been given as usual there

0:00:20.640,0:00:25.039
is more than one way to solve this

0:00:22.560,0:00:25.039
problem

0:00:25.199,0:00:29.119
looking at the code we've been given we

0:00:27.119,0:00:32.079
have a local variable count

0:00:29.119,0:00:34.320
initialized on line one referencing the

0:00:32.079,0:00:36.239
integer one

0:00:34.320,0:00:38.079
and then on lines three through five we

0:00:36.239,0:00:40.800
have a loop

0:00:38.079,0:00:41.680
now as this code has been given to us

0:00:40.800,0:00:44.879
this loop

0:00:41.680,0:00:48.270
is an infinite loop and we can

0:00:44.879,0:00:49.760
actually see that in action by

0:00:48.270,0:00:52.719
[Music]

0:00:49.760,0:00:54.559
printing count to the screen and running

0:00:52.719,0:00:57.039
our code

0:00:54.559,0:00:58.000
as you can see our loop is just running

0:00:57.039,0:01:00.559
over and over

0:00:58.000,0:01:02.239
and our count variable is incrementing

0:01:00.559,0:01:04.720
each time

0:01:02.239,0:01:06.640
remember to break out of an infinite

0:01:04.720,0:01:07.200
loop and exit the program we can hit

0:01:06.640,0:01:10.320
control

0:01:07.200,0:01:10.320
c on our keyboard

0:01:10.960,0:01:15.920
so let's look back at our code

0:01:14.159,0:01:17.600
we know we need to provide a break

0:01:15.920,0:01:20.880
condition here

0:01:17.600,0:01:21.280
and we want to count up until our number

0:01:20.880,0:01:23.680
is

0:01:21.280,0:01:23.680
5.

0:01:24.720,0:01:29.960
so let's insert break and add the

0:01:28.080,0:01:31.600
condition

0:01:29.960,0:01:34.720
[Music]

0:01:31.600,0:01:38.560
if count is equal to five

0:01:34.720,0:01:38.560
and let's just try to run our code again

0:01:38.840,0:01:43.680
now

0:01:41.040,0:01:44.240
okay and you can see we have printed out

0:01:43.680,0:01:47.360
numbers

0:01:44.240,0:01:49.520
one two three four and five and that's

0:01:47.360,0:01:52.560
exactly what we wanted to do

0:01:49.520,0:01:54.320
[Music]

0:01:52.560,0:01:55.600
so we're incrementing our account

0:01:54.320,0:01:58.479
variable and

0:01:55.600,0:02:00.000
breaking out of the loop appropriately

0:01:58.479,0:02:03.280
now what we need to do

0:02:00.000,0:02:06.479
is print out that the number is even

0:02:03.280,0:02:07.360
or the number is odd we can think about

0:02:06.479,0:02:11.200
this

0:02:07.360,0:02:11.200
in terms of an if statement

0:02:15.840,0:02:20.400
if the remainder of count divided by 2

0:02:19.040,0:02:23.840
is equal to 0

0:02:20.400,0:02:23.840
then count is an even number

0:02:24.800,0:02:29.680
in that case we want to output count is

0:02:27.360,0:02:32.000
even to the screen

0:02:29.680,0:02:33.519
now we can achieve this with either

0:02:32.000,0:02:36.879
string concatenation

0:02:33.519,0:02:40.480
or string interpolation in this case

0:02:36.879,0:02:40.480
let's use string interpolation

0:02:41.440,0:02:44.720
and we'll just format our output

0:02:43.200,0:02:48.480
according to the

0:02:44.720,0:02:48.480
example output that we were given

0:02:49.599,0:02:54.160
now if count is not even then we know

0:02:52.560,0:02:55.620
it's odd those are the only two

0:02:54.160,0:02:56.879
possibilities

0:02:55.620,0:03:00.879
[Music]

0:02:56.879,0:03:02.959
so if the first branch of our if

0:03:00.879,0:03:06.640
statement doesn't execute then we know

0:03:02.959,0:03:06.640
we're dealing with an odd number

0:03:07.360,0:03:11.760
and we want to output that the number is

0:03:09.680,0:03:13.840
odd

0:03:11.760,0:03:15.670
so let's run our code as it is now and

0:03:13.840,0:03:17.200
see what our output looks like

0:03:15.670,0:03:19.760
[Music]

0:03:17.200,0:03:22.800
okay and this is the expected behavior

0:03:19.760,0:03:25.120
so everything is looking correct

0:03:22.800,0:03:27.120
let's look back at our code and consider

0:03:25.120,0:03:32.959
some changes that we could make

0:03:27.120,0:03:35.200
there is a ruby integer method even

0:03:32.959,0:03:37.599
that we could use here on line four and

0:03:35.200,0:03:39.760
that will return a boolean as well

0:03:37.599,0:03:41.360
so it's fine to use this built-in ruby

0:03:39.760,0:03:44.080
method

0:03:41.360,0:03:45.200
if the number is even it will return the

0:03:44.080,0:03:47.200
boolean true

0:03:45.200,0:03:49.200
and the first branch of this if

0:03:47.200,0:03:52.959
statement will execute

0:03:49.200,0:03:54.879
but you'll see the same behavior

0:03:52.959,0:03:56.480
with this logic that we wrote out

0:03:54.879,0:03:58.720
earlier as well

0:03:56.480,0:03:59.920
a comparison like this will also return

0:03:58.720,0:04:02.720
a boolean

0:03:59.920,0:04:04.560
so if you didn't know the even method

0:04:02.720,0:04:06.319
that would be just fine it's okay to

0:04:04.560,0:04:08.159
write out your own logic

0:04:06.319,0:04:09.360
so just to demonstrate that this code

0:04:08.159,0:04:12.640
would work the same

0:04:09.360,0:04:15.680
using the even method we can run our

0:04:12.640,0:04:17.359
code one more time

0:04:15.680,0:04:19.680
and we'll see that the output is the

0:04:17.359,0:04:19.680
same

0:04:19.919,0:04:25.520
another option here would be to use a

0:04:22.240,0:04:25.520
ternary operator

0:04:25.850,0:04:29.440
[Music]

0:04:27.360,0:04:30.720
and this can make our code look a little

0:04:29.440,0:04:34.880
bit more concise

0:04:30.720,0:04:34.880
but perhaps a little bit less readable

0:04:36.140,0:04:39.230
[Music]

0:04:40.080,0:04:45.520
again calling the even method on count

0:04:43.199,0:04:48.639
will return a boolean

0:04:45.520,0:04:51.520
and if that boolean is true then ruby

0:04:48.639,0:04:51.520
will execute

0:04:53.360,0:05:02.370
the code on the left side of the colon

0:04:56.390,0:05:02.370
[Music]

0:05:03.120,0:05:09.199
if it returns false ruby will execute

0:05:05.440,0:05:09.199
the code on the right side of the colon

0:05:09.280,0:05:16.320
so let me just remove this code here i

0:05:12.639,0:05:16.320
forgot my exclamation point

0:05:17.360,0:05:20.560
but you can see that the output is the

0:05:19.280,0:05:22.880
same here so

0:05:20.560,0:05:25.199
this is just another example of there

0:05:22.880,0:05:27.280
being many different ways to

0:05:25.199,0:05:29.759
solve a problem and achieve the same

0:05:27.280,0:05:32.560
result

0:05:29.759,0:05:33.199
now this code may not seem as intuitive

0:05:32.560,0:05:36.320
or as

0:05:33.199,0:05:38.800
readable to you as the if statement

0:05:36.320,0:05:41.759
and that's okay it's okay to use longer

0:05:38.800,0:05:43.680
code that is more readable

0:05:41.759,0:05:45.280
now one thing to be aware of if you were

0:05:43.680,0:05:46.240
to solve this problem a little bit

0:05:45.280,0:05:49.759
differently

0:05:46.240,0:05:50.800
is to always be aware of where you're

0:05:49.759,0:05:53.600
incrementing

0:05:50.800,0:05:55.039
your counter and where you're placing

0:05:53.600,0:05:58.720
your break statement

0:05:55.039,0:06:01.120
so if we had initialized count to zero

0:05:58.720,0:06:01.840
we would want to increment our count

0:06:01.120,0:06:04.080
variable

0:06:01.840,0:06:05.759
up here prior to evaluating whether the

0:06:04.080,0:06:07.919
number is even or odd

0:06:05.759,0:06:09.680
if we only want to output numbers 1

0:06:07.919,0:06:11.680
through 5.

0:06:09.680,0:06:13.919
if we incremented the count variable

0:06:11.680,0:06:16.000
prior to checking its value

0:06:13.919,0:06:18.240
to determine whether to break out of the

0:06:16.000,0:06:20.400
loop then we may need to change the

0:06:18.240,0:06:23.680
comparison used as a condition

0:06:20.400,0:06:26.840
of our break statement so let's just do

0:06:23.680,0:06:29.930
a quick demonstration of that

0:06:26.840,0:06:29.930
[Music]

0:06:31.120,0:06:35.039
if we increment count prior to checking

0:06:34.240,0:06:38.479
its value

0:06:35.039,0:06:39.840
to break out of the loop then you can

0:06:38.479,0:06:44.080
see that we actually

0:06:39.840,0:06:44.080
only print numbers one through four

0:06:45.039,0:06:50.000
and that's not the correct output

0:06:48.319,0:06:52.720
what we would have to do is change our

0:06:50.000,0:06:55.039
comparison on line 11

0:06:52.720,0:06:57.440
to check whether count is greater than 5

0:06:55.039,0:06:57.840
so that the loop will still execute once

0:06:57.440,0:07:02.080
more

0:06:57.840,0:07:04.160
when count is equal to 5.

0:07:02.080,0:07:06.240
as you can see now the code is working

0:07:04.160,0:07:08.560
as we expected again

0:07:06.240,0:07:10.400
so it's just something to always be

0:07:08.560,0:07:14.000
conscious of

0:07:10.400,0:07:14.000
always be aware of

0:07:15.599,0:07:19.360
where are your incrementing count

0:07:17.039,0:07:21.599
variables and exactly how

0:07:19.360,0:07:31.280
you are checking their value as a

0:07:21.599,0:07:31.280
condition of your break

