0:00:05.359,0:00:08.880
this problem

0:00:06.160,0:00:10.240
asks us to write a program that displays

0:00:08.880,0:00:13.040
a welcome message

0:00:10.240,0:00:15.200
but only after the user has entered the

0:00:13.040,0:00:17.440
correct password

0:00:15.200,0:00:20.240
we're going to define the password as a

0:00:17.440,0:00:22.640
constant in our program

0:00:20.240,0:00:24.640
if the user enters an incorrect password

0:00:22.640,0:00:26.800
we will continue prompting them until

0:00:24.640,0:00:29.359
they enter the correct password

0:00:26.800,0:00:30.240
so the first step here is to initialize

0:00:29.359,0:00:31.880
our constant

0:00:30.240,0:00:34.969
and set up a password

0:00:31.880,0:00:34.969
[Music]

0:00:37.840,0:00:43.040
we'll use the word secret

0:00:40.280,0:00:45.360
[Music]

0:00:43.040,0:00:48.000
and we're going to include a variety of

0:00:45.360,0:00:50.960
uppercase and lowercase letters

0:00:48.000,0:00:52.079
although typically you want your input

0:00:50.960,0:00:55.039
validation for

0:00:52.079,0:00:57.199
user input to be case insensitive a

0:00:55.039,0:00:59.600
password is a different situation

0:00:57.199,0:01:02.879
and you do want your input validation

0:00:59.600,0:01:05.920
for passwords to be case sensitive

0:01:02.879,0:01:07.200
of course this is just an example for a

0:01:05.920,0:01:09.200
small exercise

0:01:07.200,0:01:13.119
and this isn't how you would handle

0:01:09.200,0:01:17.439
passwords in a real world scenario

0:01:13.119,0:01:17.439
so we know we want to prompt the user

0:01:17.920,0:01:22.640
we'll ask them to please enter their

0:01:20.080,0:01:22.640
password

0:01:23.200,0:01:28.400
we'll initialize a local variable

0:01:25.360,0:01:28.400
password try

0:01:28.880,0:01:31.920
and this is where we'll store the user

0:01:30.560,0:01:34.320
input

0:01:31.920,0:01:35.520
recall that we want to call chomp on our

0:01:34.320,0:01:37.439
user input

0:01:35.520,0:01:41.840
in order to remove the new line

0:01:37.439,0:01:41.840
character from the end of the string

0:01:41.920,0:01:45.759
so we're prompted for our password and

0:01:44.240,0:01:47.460
at this point i can enter

0:01:45.759,0:01:49.920
anything

0:01:47.460,0:01:52.960
[Music]

0:01:49.920,0:01:55.200
and our program will just continue on i

0:01:52.960,0:01:56.580
haven't enforced any input validation at

0:01:55.200,0:02:00.640
this point

0:01:56.580,0:02:02.719
[Music]

0:02:00.640,0:02:08.319
so we'll want to put lines 3 and 4

0:02:02.719,0:02:10.319
within a loop

0:02:08.319,0:02:12.720
so that we can continue to prompt the

0:02:10.319,0:02:15.320
user to input the correct password

0:02:12.720,0:02:17.040
if the password they input was wrong

0:02:15.320,0:02:19.200
[Music]

0:02:17.040,0:02:21.760
now how do we determine if the password

0:02:19.200,0:02:23.500
they input was correct

0:02:21.760,0:02:26.720
we can simply compare

0:02:23.500,0:02:28.959
[Music]

0:02:26.720,0:02:32.160
the string referenced by our password

0:02:28.959,0:02:32.160
try local variable

0:02:32.319,0:02:39.519
to the string referenced by our password

0:02:35.440,0:02:42.400
constant and this comparison here on

0:02:39.519,0:02:44.960
line six will return true or false

0:02:42.400,0:02:46.400
we can actually demonstrate that just by

0:02:44.960,0:02:48.840
[Music]

0:02:46.400,0:02:50.400
outputting the return value of that

0:02:48.840,0:02:53.360
comparison

0:02:50.400,0:02:53.760
and remember we've left our user input

0:02:53.360,0:02:56.560
as

0:02:53.760,0:02:57.200
case sensitive so i'll enter the word

0:02:56.560,0:02:59.519
secret

0:02:57.200,0:03:01.840
but because the cases of the letter do

0:02:59.519,0:03:04.960
not match our password constant

0:03:01.840,0:03:06.319
we're expecting a return value of false

0:03:04.960,0:03:08.480
[Music]

0:03:06.319,0:03:10.000
and that's what we see

0:03:08.480,0:03:12.080
[Music]

0:03:10.000,0:03:14.280
this time i'll enter the password with

0:03:12.080,0:03:16.080
the correct case

0:03:14.280,0:03:19.700
[Music]

0:03:16.080,0:03:22.480
and our comparison returns true

0:03:19.700,0:03:24.560
[Music]

0:03:22.480,0:03:26.319
so now we know how we're determining

0:03:24.560,0:03:27.480
whether or not the user entered the

0:03:26.319,0:03:29.920
correct password

0:03:27.480,0:03:32.159
[Music]

0:03:29.920,0:03:33.950
and if they do then we want to break out

0:03:32.159,0:03:36.159
of our loop

0:03:33.950,0:03:37.920
[Music]

0:03:36.159,0:03:40.640
if they've entered the correct password

0:03:37.920,0:03:44.480
and we break out of our loop

0:03:40.640,0:03:44.480
we'll display a welcome message to the

0:03:44.840,0:03:48.560
user

0:03:46.959,0:03:50.319
this time when i enter the correct

0:03:48.560,0:03:51.920
password i'll expect to

0:03:50.319,0:03:55.010
see the string welcome

0:03:51.920,0:03:55.010
[Music]

0:03:57.040,0:04:02.560
now if i enter something incorrect

0:04:01.030,0:04:04.879
[Music]

0:04:02.560,0:04:08.959
i'm prompted again but there's no error

0:04:04.879,0:04:14.600
message telling me that it was invalid

0:04:08.959,0:04:16.560
so let's fix that

0:04:14.600,0:04:18.400
[Music]

0:04:16.560,0:04:20.160
will display a message to the user

0:04:18.400,0:04:21.470
telling them that the password they

0:04:20.160,0:04:23.040
input was invalid

0:04:21.470,0:04:24.960
[Music]

0:04:23.040,0:04:26.560
typically if you're going to continually

0:04:24.960,0:04:29.360
prompt a user for something

0:04:26.560,0:04:33.199
you want to tell them why that their

0:04:29.360,0:04:33.199
input was incorrect or invalid

0:04:35.120,0:04:44.080
now when i enter an incorrect password

0:04:42.160,0:04:46.320
the program tells me that my password

0:04:44.080,0:04:49.199
was invalid and then prompts me for

0:04:46.320,0:04:49.199
the password again

0:04:49.840,0:04:57.280
so this is a much more clear message to

0:04:51.919,0:04:59.199
the user

0:04:57.280,0:05:01.520
and we've achieved all the functionality

0:04:59.199,0:05:03.840
we want here

0:05:01.520,0:05:06.080
notice again on line five that we did

0:05:03.840,0:05:09.440
not call the string down case method

0:05:06.080,0:05:10.000
on the user input and that's in order to

0:05:09.440,0:05:14.080
preserve

0:05:10.000,0:05:14.080
a case sensitive functionality for

0:05:18.600,0:05:21.600
passwords

